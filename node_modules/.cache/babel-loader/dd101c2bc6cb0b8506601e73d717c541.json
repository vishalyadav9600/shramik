{"ast":null,"code":"import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\n\nexport default function useMediaQuery(queryInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","map":{"version":3,"names":["React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQuery","queryInput","options","arguments","length","undefined","theme","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","name","props","process","env","NODE_ENV","console","error","join","query","replace","match","setMatch","useState","matches","active","queryList","updateMatch","addListener","removeListener","useDebugValue"],"sources":["D:/Study/SEM_07/Final Year Project/Project/ShramikFrontend/shramik/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"sourcesContent":["import * as React from 'react';\r\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\r\n\r\nexport default function useMediaQuery(queryInput, options = {}) {\r\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\r\n  // All the browsers MUI support have this built-in.\r\n  // This defensive check is here for simplicity.\r\n  // Most of the time, the match media logic isn't central to people tests.\r\n\r\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n  const {\r\n    defaultMatches = false,\r\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\r\n    noSsr = false,\r\n    ssrMatchMedia = null\r\n  } = getThemeProps({\r\n    name: 'MuiUseMediaQuery',\r\n    props: options,\r\n    theme\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof queryInput === 'function' && theme === null) {\r\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\r\n    }\r\n  }\r\n\r\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, '');\r\n  const [match, setMatch] = React.useState(() => {\r\n    if (noSsr && supportMatchMedia) {\r\n      return matchMedia(query).matches;\r\n    }\r\n\r\n    if (ssrMatchMedia) {\r\n      return ssrMatchMedia(query).matches;\r\n    } // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n\r\n\r\n    return defaultMatches;\r\n  });\r\n  useEnhancedEffect(() => {\r\n    let active = true;\r\n\r\n    if (!supportMatchMedia) {\r\n      return undefined;\r\n    }\r\n\r\n    const queryList = matchMedia(query);\r\n\r\n    const updateMatch = () => {\r\n      // Workaround Safari wrong implementation of matchMedia\r\n      // TODO can we remove it?\r\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\r\n      if (active) {\r\n        setMatch(queryList.matches);\r\n      }\r\n    };\r\n\r\n    updateMatch();\r\n    queryList.addListener(updateMatch);\r\n    return () => {\r\n      active = false;\r\n      queryList.removeListener(updateMatch);\r\n    };\r\n  }, [query, matchMedia, supportMatchMedia]);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue({\r\n      query,\r\n      match\r\n    });\r\n  }\r\n\r\n  return match;\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,EAAEC,sBAAsB,IAAIC,QAAQ,QAAQ,aAAa;AAC/E,OAAOC,iBAAiB,MAAM,4BAA4B;AAC1D;AACA;AACA;;AAEA,eAAe,SAASC,aAAaA,CAACC,UAAU,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC5D,MAAMG,KAAK,GAAGR,QAAQ,EAAE,CAAC,CAAC;EAC1B;EACA;EACA;;EAEA,MAAMS,iBAAiB,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,UAAU,KAAK,WAAW;EACnG,MAAM;IACJC,cAAc,GAAG,KAAK;IACtBD,UAAU,GAAGF,iBAAiB,GAAGC,MAAM,CAACC,UAAU,GAAG,IAAI;IACzDE,KAAK,GAAG,KAAK;IACbC,aAAa,GAAG;EAClB,CAAC,GAAGhB,aAAa,CAAC;IAChBiB,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAEZ,OAAO;IACdI;EACF,CAAC,CAAC;EAEF,IAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,OAAOhB,UAAU,KAAK,UAAU,IAAIK,KAAK,KAAK,IAAI,EAAE;MACtDY,OAAO,CAACC,KAAK,CAAC,CAAC,gDAAgD,EAAE,8DAA8D,EAAE,0DAA0D,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1M;EACF;EAEA,IAAIC,KAAK,GAAG,OAAOpB,UAAU,KAAK,UAAU,GAAGA,UAAU,CAACK,KAAK,CAAC,GAAGL,UAAU;EAC7EoB,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,KAAK,CAAC8B,QAAQ,CAAC,MAAM;IAC7C,IAAId,KAAK,IAAIJ,iBAAiB,EAAE;MAC9B,OAAOE,UAAU,CAACY,KAAK,CAAC,CAACK,OAAO;IAClC;IAEA,IAAId,aAAa,EAAE;MACjB,OAAOA,aAAa,CAACS,KAAK,CAAC,CAACK,OAAO;IACrC,CAAC,CAAC;IACF;;IAGA,OAAOhB,cAAc;EACvB,CAAC,CAAC;EACFX,iBAAiB,CAAC,MAAM;IACtB,IAAI4B,MAAM,GAAG,IAAI;IAEjB,IAAI,CAACpB,iBAAiB,EAAE;MACtB,OAAOF,SAAS;IAClB;IAEA,MAAMuB,SAAS,GAAGnB,UAAU,CAACY,KAAK,CAAC;IAEnC,MAAMQ,WAAW,GAAGA,CAAA,KAAM;MACxB;MACA;MACA;MACA,IAAIF,MAAM,EAAE;QACVH,QAAQ,CAACI,SAAS,CAACF,OAAO,CAAC;MAC7B;IACF,CAAC;IAEDG,WAAW,EAAE;IACbD,SAAS,CAACE,WAAW,CAACD,WAAW,CAAC;IAClC,OAAO,MAAM;MACXF,MAAM,GAAG,KAAK;MACdC,SAAS,CAACG,cAAc,CAACF,WAAW,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACR,KAAK,EAAEZ,UAAU,EAAEF,iBAAiB,CAAC,CAAC;EAE1C,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC;IACAtB,KAAK,CAACqC,aAAa,CAAC;MAClBX,KAAK;MACLE;IACF,CAAC,CAAC;EACJ;EAEA,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module"}