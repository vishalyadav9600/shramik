{"ast":null,"code":"import { forEach } from 'property-expr';\nlet trim = part => part.substr(0, part.length - 1).substr(1);\nexport function getIn(schema, path, value) {\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : value;\n  let parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent,\n    parentPath: path,\n    schema\n  };\n  forEach(path, (_part, isBracket, isArray) => {\n    let part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context,\n      parent,\n      value\n    });\n    if (schema.innerType) {\n      let idx = isArray ? parseInt(part, 10) : 0;\n      if (value && idx >= value.length) {\n        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);\n      }\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: \"${schema._type}\")`);\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema,\n    parent,\n    parentPath: lastPart\n  };\n}\nconst reach = (obj, path, value, context) => getIn(obj, path, value, context).schema;\nexport default reach;","map":{"version":3,"names":["forEach","trim","part","substr","length","getIn","schema","path","value","context","arguments","undefined","parent","lastPart","lastPartDebug","parentPath","_part","isBracket","isArray","resolve","innerType","idx","parseInt","Error","fields","_type","reach","obj"],"sources":["D:/Study/SEM_07/Final Year Project/Project/ShramikFrontend/shramik/node_modules/yup/es/util/reach.js"],"sourcesContent":["import { forEach } from 'property-expr';\r\n\r\nlet trim = part => part.substr(0, part.length - 1).substr(1);\r\n\r\nexport function getIn(schema, path, value, context = value) {\r\n  let parent, lastPart, lastPartDebug; // root path: ''\r\n\r\n  if (!path) return {\r\n    parent,\r\n    parentPath: path,\r\n    schema\r\n  };\r\n  forEach(path, (_part, isBracket, isArray) => {\r\n    let part = isBracket ? trim(_part) : _part;\r\n    schema = schema.resolve({\r\n      context,\r\n      parent,\r\n      value\r\n    });\r\n\r\n    if (schema.innerType) {\r\n      let idx = isArray ? parseInt(part, 10) : 0;\r\n\r\n      if (value && idx >= value.length) {\r\n        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);\r\n      }\r\n\r\n      parent = value;\r\n      value = value && value[idx];\r\n      schema = schema.innerType;\r\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\r\n    // in these cases the current part is the next schema and should be processed\r\n    // in this iteration. For cases where the index signature is included this\r\n    // check will fail and we'll handle the `child` part on the next iteration like normal\r\n\r\n\r\n    if (!isArray) {\r\n      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: \"${schema._type}\")`);\r\n      parent = value;\r\n      value = value && value[part];\r\n      schema = schema.fields[part];\r\n    }\r\n\r\n    lastPart = part;\r\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\r\n  });\r\n  return {\r\n    schema,\r\n    parent,\r\n    parentPath: lastPart\r\n  };\r\n}\r\n\r\nconst reach = (obj, path, value, context) => getIn(obj, path, value, context).schema;\r\n\r\nexport default reach;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AAEvC,IAAIC,IAAI,GAAGC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,EAAED,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAACD,MAAM,CAAC,CAAC,CAAC;AAE5D,OAAO,SAASE,KAAKA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAmB;EAAA,IAAjBC,OAAO,GAAAC,SAAA,CAAAN,MAAA,QAAAM,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGF,KAAK;EACxD,IAAII,MAAM,EAAEC,QAAQ,EAAEC,aAAa,CAAC,CAAC;;EAErC,IAAI,CAACP,IAAI,EAAE,OAAO;IAChBK,MAAM;IACNG,UAAU,EAAER,IAAI;IAChBD;EACF,CAAC;EACDN,OAAO,CAACO,IAAI,EAAE,CAACS,KAAK,EAAEC,SAAS,EAAEC,OAAO,KAAK;IAC3C,IAAIhB,IAAI,GAAGe,SAAS,GAAGhB,IAAI,CAACe,KAAK,CAAC,GAAGA,KAAK;IAC1CV,MAAM,GAAGA,MAAM,CAACa,OAAO,CAAC;MACtBV,OAAO;MACPG,MAAM;MACNJ;IACF,CAAC,CAAC;IAEF,IAAIF,MAAM,CAACc,SAAS,EAAE;MACpB,IAAIC,GAAG,GAAGH,OAAO,GAAGI,QAAQ,CAACpB,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC;MAE1C,IAAIM,KAAK,IAAIa,GAAG,IAAIb,KAAK,CAACJ,MAAM,EAAE;QAChC,MAAM,IAAImB,KAAK,CAAE,oDAAmDP,KAAM,kBAAiBT,IAAK,IAAG,GAAI,2CAA0C,CAAC;MACpJ;MAEAK,MAAM,GAAGJ,KAAK;MACdA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACa,GAAG,CAAC;MAC3Bf,MAAM,GAAGA,MAAM,CAACc,SAAS;IAC3B,CAAC,CAAC;IACF;IACA;IACA;;IAGA,IAAI,CAACF,OAAO,EAAE;MACZ,IAAI,CAACZ,MAAM,CAACkB,MAAM,IAAI,CAAClB,MAAM,CAACkB,MAAM,CAACtB,IAAI,CAAC,EAAE,MAAM,IAAIqB,KAAK,CAAE,yCAAwChB,IAAK,IAAG,GAAI,eAAcO,aAAc,sBAAqBR,MAAM,CAACmB,KAAM,IAAG,CAAC;MACnLb,MAAM,GAAGJ,KAAK;MACdA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACN,IAAI,CAAC;MAC5BI,MAAM,GAAGA,MAAM,CAACkB,MAAM,CAACtB,IAAI,CAAC;IAC9B;IAEAW,QAAQ,GAAGX,IAAI;IACfY,aAAa,GAAGG,SAAS,GAAG,GAAG,GAAGD,KAAK,GAAG,GAAG,GAAG,GAAG,GAAGA,KAAK;EAC7D,CAAC,CAAC;EACF,OAAO;IACLV,MAAM;IACNM,MAAM;IACNG,UAAU,EAAEF;EACd,CAAC;AACH;AAEA,MAAMa,KAAK,GAAGA,CAACC,GAAG,EAAEpB,IAAI,EAAEC,KAAK,EAAEC,OAAO,KAAKJ,KAAK,CAACsB,GAAG,EAAEpB,IAAI,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAACH,MAAM;AAEpF,eAAeoB,KAAK"},"metadata":{},"sourceType":"module"}