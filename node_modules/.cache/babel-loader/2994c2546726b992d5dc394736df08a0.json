{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\SEM_07\\\\Final Year Project\\\\Project\\\\ShramikFrontend\\\\shramik\\\\src\\\\services\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst [emailText, setEmailText] = useState(\"\");\nconst [passwordText, setPasswordText] = useState(\"\");\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const login = user => {\n    // Perform login logic and set the logged-in user\n    axios.post(\"http://localhost:8080/login/user-login\", {\n      userName: emailText,\n      password: passwordText\n    }).then(res => setLoggedInUser(userName)).then(() => history(\"/\"));\n    // setLoggedInUser(user);\n  };\n\n  const logout = () => {\n    // Perform logout logic and clear the logged-in user\n    axios.post(\"http://localhost:8080/login/user-signup\", {\n      userName: emailText,\n      password: passwordText\n    }).then(res => setLoggedInUser(null)).then(() => history(\"/login\"));\n    // setLoggedInUser(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loggedInUser,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n// export const AuthProvider = ({ children }) => {\n//   // Here, you can manage the loggedInUser state and other authentication-related data\n//   const [loggedInUser, setLoggedInUser] = useState(null);\n\n//   // Your authentication logic...\n\n//   // Provide the loggedInUser value to consuming components\n//   const authContextValue = {\n//     loggedInUser,\n//     setLoggedInUser,\n//   };\n\n//   return (\n//     <AuthContext.Provider value={authContextValue}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export { AuthContext, AuthProvider };\n_s(AuthProvider, \"VVT4f3QDlmZ0IcBuQY89iRPCH+g=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","AuthContext","emailText","setEmailText","passwordText","setPasswordText","AuthProvider","_ref","_s","children","loggedInUser","setLoggedInUser","login","user","axios","post","userName","password","then","res","history","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Study/SEM_07/Final Year Project/Project/ShramikFrontend/shramik/src/services/AuthContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\nconst [emailText, setEmailText] = useState(\"\");\r\nconst [passwordText, setPasswordText] = useState(\"\");\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [loggedInUser, setLoggedInUser] = useState(null);\r\n\r\n  const login = (user) => {\r\n    // Perform login logic and set the logged-in user\r\n    axios\r\n      .post(\"http://localhost:8080/login/user-login\", {\r\n        userName: emailText,\r\n        password: passwordText,\r\n      })\r\n      .then((res) => setLoggedInUser(userName))\r\n      .then(() => history(\"/\"));\r\n    // setLoggedInUser(user);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Perform logout logic and clear the logged-in user\r\n    axios\r\n      .post(\"http://localhost:8080/login/user-signup\", {\r\n        userName: emailText,\r\n        password: passwordText,\r\n      })\r\n      .then((res) => setLoggedInUser(null))\r\n      .then(() => history(\"/login\"));\r\n    // setLoggedInUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ loggedInUser, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   // Here, you can manage the loggedInUser state and other authentication-related data\r\n//   const [loggedInUser, setLoggedInUser] = useState(null);\r\n\r\n//   // Your authentication logic...\r\n\r\n//   // Provide the loggedInUser value to consuming components\r\n//   const authContextValue = {\r\n//     loggedInUser,\r\n//     setLoggedInUser,\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={authContextValue}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAE;AAC1C,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;AAC9C,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;AAEpD,OAAO,MAAMQ,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMc,KAAK,GAAIC,IAAI,IAAK;IACtB;IACAC,KAAK,CACFC,IAAI,CAAC,wCAAwC,EAAE;MAC9CC,QAAQ,EAAEd,SAAS;MACnBe,QAAQ,EAAEb;IACZ,CAAC,CAAC,CACDc,IAAI,CAAEC,GAAG,IAAKR,eAAe,CAACK,QAAQ,CAAC,CAAC,CACxCE,IAAI,CAAC,MAAME,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3B;EACF,CAAC;;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAP,KAAK,CACFC,IAAI,CAAC,yCAAyC,EAAE;MAC/CC,QAAQ,EAAEd,SAAS;MACnBe,QAAQ,EAAEb;IACZ,CAAC,CAAC,CACDc,IAAI,CAAEC,GAAG,IAAKR,eAAe,CAAC,IAAI,CAAC,CAAC,CACpCO,IAAI,CAAC,MAAME,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChC;EACF,CAAC;;EAED,oBACEpB,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEb,YAAY;MAAEE,KAAK;MAAES;IAAO,CAAE;IAAAZ,QAAA,EAC1DA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAnB,EAAA,CArDaF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}