{"ast":null,"code":"import * as actionType from '../actionTypes/authActionsTypes';\nimport api from '../../helpers/api.js';\nexport const login = user => {\n  return async dispatch => {\n    dispatch({\n      type: actionType.LOGIN_BEGIN\n    });\n    await api.signIn({\n      email: user.loginEmail,\n      password: user.loginPassword\n    }).then(res => {\n      dispatch({\n        type: actionType.ON_LOGIN_SUCCESS,\n        payload: { ...res.data\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionType.ON_LOGIN_ERROR,\n        payload: {\n          error: error.response.data.error\n        }\n      });\n    });\n  };\n};\nexport const signup = user => {\n  return async dispatch => {\n    dispatch({\n      type: actionType.LOGIN_BEGIN\n    });\n    await api.signUp({ ...user\n    }).then(res => {\n      dispatch({\n        type: actionType.ON_LOGIN_SUCCESS,\n        payload: { ...res.data\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionType.ON_LOGIN_ERROR,\n        payload: {\n          error: error.response.data.error\n        }\n      });\n    });\n  };\n};\nexport const updateUser = user => {\n  return async dispatch => {\n    await api.update({ ...user\n    }).then(res => {\n      dispatch({\n        type: actionType.USER_UPDATE,\n        payload: { ...res.data\n        }\n      });\n    }).catch(error => {\n      var _error$response;\n\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        dispatch({\n          type: 'SIGN_OUT',\n          payload: {\n            error: 'session expired'\n          }\n        });\n      } else {\n        dispatch({\n          type: actionType.ON_UPDATE_ERROR,\n          payload: {\n            error: error.response.data.error\n          }\n        });\n      }\n    });\n  };\n};\nexport const updatePassword = user => {\n  return async dispatch => {\n    await api.updatepassword({ ...user\n    }).then(res => {\n      dispatch({\n        type: actionType.USER_UPDATE,\n        payload: { ...res.data\n        }\n      });\n    }).catch(error => {\n      var _error$response2;\n\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        dispatch({\n          type: 'SIGN_OUT',\n          payload: {\n            error: 'session expired'\n          }\n        });\n      } else {\n        dispatch({\n          type: actionType.ON_UPDATE_ERROR,\n          payload: {\n            error: error.response.data.error\n          }\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/vishal/Desktop/food-ordering-website-main/src/store/actions/authActions.js"],"names":["actionType","api","login","user","dispatch","type","LOGIN_BEGIN","signIn","email","loginEmail","password","loginPassword","then","res","ON_LOGIN_SUCCESS","payload","data","catch","error","ON_LOGIN_ERROR","response","signup","signUp","updateUser","update","USER_UPDATE","status","ON_UPDATE_ERROR","updatePassword","updatepassword"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,iCAA5B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,UAAU,CAACM;AAAnB,KAAD,CAAR;AAEA,UAAML,GAAG,CACNM,MADG,CACI;AAAEC,MAAAA,KAAK,EAAEL,IAAI,CAACM,UAAd;AAA0BC,MAAAA,QAAQ,EAAEP,IAAI,CAACQ;AAAzC,KADJ,EAEHC,IAFG,CAEGC,GAAD,IAAS;AACbT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACc,gBADV;AAEPC,QAAAA,OAAO,EAAE,EACP,GAAGF,GAAG,CAACG;AADA;AAFF,OAAD,CAAR;AAMD,KATG,EAUHC,KAVG,CAUIC,KAAD,IAAW;AAChBd,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACmB,cADV;AAEPJ,QAAAA,OAAO,EAAE;AACPG,UAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeJ,IAAf,CAAoBE;AADpB;AAFF,OAAD,CAAR;AAMD,KAjBG,CAAN;AAkBD,GArBD;AAsBD,CAvBM;AAyBP,OAAO,MAAMG,MAAM,GAAIlB,IAAD,IAAU;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,UAAU,CAACM;AAAnB,KAAD,CAAR;AAEA,UAAML,GAAG,CACNqB,MADG,CACI,EAAE,GAAGnB;AAAL,KADJ,EAEHS,IAFG,CAEGC,GAAD,IAAS;AACbT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACc,gBADV;AAEPC,QAAAA,OAAO,EAAE,EACP,GAAGF,GAAG,CAACG;AADA;AAFF,OAAD,CAAR;AAMD,KATG,EAUHC,KAVG,CAUIC,KAAD,IAAW;AAChBd,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACmB,cADV;AAEPJ,QAAAA,OAAO,EAAE;AACPG,UAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeJ,IAAf,CAAoBE;AADpB;AAFF,OAAD,CAAR;AAMD,KAjBG,CAAN;AAkBD,GArBD;AAsBD,CAvBM;AAwBP,OAAO,MAAMK,UAAU,GAAIpB,IAAD,IAAU;AAClC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMH,GAAG,CACNuB,MADG,CACI,EAAE,GAAGrB;AAAL,KADJ,EAEHS,IAFG,CAEGC,GAAD,IAAS;AACbT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACyB,WADV;AAEPV,QAAAA,OAAO,EAAE,EACP,GAAGF,GAAG,CAACG;AADA;AAFF,OAAD,CAAR;AAMD,KATG,EAUHC,KAVG,CAUIC,KAAD,IAAW;AAAA;;AAChB,UAAI,oBAAAA,KAAK,CAACE,QAAN,oEAAgBM,MAAhB,MAA2B,GAA/B,EAAoC;AAClCtB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,UADC;AAEPU,UAAAA,OAAO,EAAE;AACPG,YAAAA,KAAK,EAAE;AADA;AAFF,SAAD,CAAR;AAMD,OAPD,MAOO;AACLd,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEL,UAAU,CAAC2B,eADV;AAEPZ,UAAAA,OAAO,EAAE;AACPG,YAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeJ,IAAf,CAAoBE;AADpB;AAFF,SAAD,CAAR;AAMD;AACF,KA1BG,CAAN;AA2BD,GA5BD;AA6BD,CA9BM;AA+BP,OAAO,MAAMU,cAAc,GAAIzB,IAAD,IAAU;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMH,GAAG,CACN4B,cADG,CACY,EAAE,GAAG1B;AAAL,KADZ,EAEHS,IAFG,CAEGC,GAAD,IAAS;AACbT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACyB,WADV;AAEPV,QAAAA,OAAO,EAAE,EACP,GAAGF,GAAG,CAACG;AADA;AAFF,OAAD,CAAR;AAMD,KATG,EAUHC,KAVG,CAUIC,KAAD,IAAW;AAAA;;AAChB,UAAI,qBAAAA,KAAK,CAACE,QAAN,sEAAgBM,MAAhB,MAA2B,GAA/B,EAAoC;AAClCtB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAE,UADC;AAEPU,UAAAA,OAAO,EAAE;AACPG,YAAAA,KAAK,EAAE;AADA;AAFF,SAAD,CAAR;AAMD,OAPD,MAOO;AACLd,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEL,UAAU,CAAC2B,eADV;AAEPZ,UAAAA,OAAO,EAAE;AACPG,YAAAA,KAAK,EAAEA,KAAK,CAACE,QAAN,CAAeJ,IAAf,CAAoBE;AADpB;AAFF,SAAD,CAAR;AAMD;AACF,KA1BG,CAAN;AA2BD,GA5BD;AA6BD,CA9BM","sourcesContent":["import * as actionType from '../actionTypes/authActionsTypes';\nimport api from '../../helpers/api.js';\n\nexport const login = (user) => {\n  return async (dispatch) => {\n    dispatch({ type: actionType.LOGIN_BEGIN });\n\n    await api\n      .signIn({ email: user.loginEmail, password: user.loginPassword })\n      .then((res) => {\n        dispatch({\n          type: actionType.ON_LOGIN_SUCCESS,\n          payload: {\n            ...res.data,\n          },\n        });\n      })\n      .catch((error) => {\n        dispatch({\n          type: actionType.ON_LOGIN_ERROR,\n          payload: {\n            error: error.response.data.error,\n          },\n        });\n      });\n  };\n};\n\nexport const signup = (user) => {\n  return async (dispatch) => {\n    dispatch({ type: actionType.LOGIN_BEGIN });\n\n    await api\n      .signUp({ ...user })\n      .then((res) => {\n        dispatch({\n          type: actionType.ON_LOGIN_SUCCESS,\n          payload: {\n            ...res.data,\n          },\n        });\n      })\n      .catch((error) => {\n        dispatch({\n          type: actionType.ON_LOGIN_ERROR,\n          payload: {\n            error: error.response.data.error,\n          },\n        });\n      });\n  };\n};\nexport const updateUser = (user) => {\n  return async (dispatch) => {\n    await api\n      .update({ ...user })\n      .then((res) => {\n        dispatch({\n          type: actionType.USER_UPDATE,\n          payload: {\n            ...res.data,\n          },\n        });\n      })\n      .catch((error) => {\n        if (error.response?.status === 401) {\n          dispatch({\n            type: 'SIGN_OUT',\n            payload: {\n              error: 'session expired',\n            },\n          });\n        } else {\n          dispatch({\n            type: actionType.ON_UPDATE_ERROR,\n            payload: {\n              error: error.response.data.error,\n            },\n          });\n        }\n      });\n  };\n};\nexport const updatePassword = (user) => {\n  return async (dispatch) => {\n    await api\n      .updatepassword({ ...user })\n      .then((res) => {\n        dispatch({\n          type: actionType.USER_UPDATE,\n          payload: {\n            ...res.data,\n          },\n        });\n      })\n      .catch((error) => {\n        if (error.response?.status === 401) {\n          dispatch({\n            type: 'SIGN_OUT',\n            payload: {\n              error: 'session expired',\n            },\n          });\n        } else {\n          dispatch({\n            type: actionType.ON_UPDATE_ERROR,\n            payload: {\n              error: error.response.data.error,\n            },\n          });\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}